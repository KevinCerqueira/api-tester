[{"C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\index.tsx":"1","C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\Home.tsx":"2","C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\components\\MyModal.tsx":"3","C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\components\\MySnackBar.tsx":"4"},{"size":274,"mtime":1609937862560,"results":"5","hashOfConfig":"6"},{"size":7500,"mtime":1611163825813,"results":"7","hashOfConfig":"6"},{"size":1606,"mtime":1611144389633,"results":"8","hashOfConfig":"6"},{"size":2236,"mtime":1611152742513,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1mz57ru",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\index.tsx",[],["20","21","22","23","24"],"C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\Home.tsx",["25","26"],"C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\components\\MyModal.tsx",[],"C:\\Users\\paulolima\\documents\\github\\api-tester\\web\\src\\components\\MySnackBar.tsx",["27","28","29","30","31"],"/* eslint-disable prettier/prettier */\r\nimport React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nexport interface SnackbarMessage {\r\n  message: string;\r\n  key: number;\r\n}\r\n\r\nexport interface State {\r\n  open: boolean;\r\n  snackPack: SnackbarMessage[];\r\n  messageInfo?: SnackbarMessage;\r\n}\r\n\r\nexport interface ValuesProps {\r\n  title: string;\r\n}\r\n\r\nexport default function ConsecutiveSnackbars(props: ValuesProps): JSX.Element {\r\n  const [snackPack, setSnackPack] = React.useState<SnackbarMessage[]>([]);\r\n  const [open, setOpen] = React.useState(true);\r\n  const [messageInfo, setMessageInfo] = React.useState<\r\n    SnackbarMessage | undefined\r\n  >(undefined);\r\n\r\n  React.useEffect(() => {\r\n    if (snackPack.length && !messageInfo) {\r\n      // Set a new snack when we don't have an active one\r\n      setMessageInfo({ ...snackPack[0] });\r\n      setSnackPack((prev) => prev.slice(1));\r\n      setOpen(true);\r\n    } else if (snackPack.length && messageInfo && open) {\r\n      // Close an active snack when a new one is added\r\n      setOpen(false);\r\n    }\r\n  }, [snackPack, messageInfo, open]);\r\n\r\n  const handleClick = (message: string) => () => {\r\n    setSnackPack((prev) => [...prev, { message, key: new Date().getTime() }]);\r\n  };\r\n\r\n  const handleClose: any = (\r\n    event: React.SyntheticEvent | React.MouseEvent,\r\n    reason?: string,\r\n  ) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleExited = (): void => {\r\n    setMessageInfo(undefined);\r\n  };\r\n  const { title } = props;\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        onExited={handleExited}\r\n        message={title}\r\n        action={\r\n          // eslint-disable-next-line react/jsx-wrap-multilines\r\n          <>\r\n            <Button color=\"primary\" size=\"small\" onClick={handleClose}>\r\n              OK\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":61,"column":23,"nodeType":"44","messageId":"45","endLine":61,"endColumn":26,"suggestions":"46"},{"ruleId":"42","severity":1,"message":"43","line":84,"column":46,"nodeType":"44","messageId":"45","endLine":84,"endColumn":49,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":22},{"ruleId":"48","severity":1,"message":"52","line":3,"column":24,"nodeType":"50","messageId":"51","endLine":3,"endColumn":34},{"ruleId":"48","severity":1,"message":"53","line":3,"column":36,"nodeType":"50","messageId":"51","endLine":3,"endColumn":41},{"ruleId":"48","severity":1,"message":"54","line":41,"column":9,"nodeType":"50","messageId":"51","endLine":41,"endColumn":20},{"ruleId":"42","severity":1,"message":"43","line":45,"column":22,"nodeType":"44","messageId":"45","endLine":45,"endColumn":25,"suggestions":"55"},"lines-around-directive",["56"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["57","58"],["59","60"],"@typescript-eslint/no-unused-vars","'createStyles' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'handleClick' is assigned a value but never used.",["61","62"],"padding-line-between-statements",{"messageId":"63","fix":"64","desc":"65"},{"messageId":"66","fix":"67","desc":"68"},{"messageId":"63","fix":"69","desc":"65"},{"messageId":"66","fix":"70","desc":"68"},{"messageId":"63","fix":"71","desc":"65"},{"messageId":"66","fix":"72","desc":"68"},"suggestUnknown",{"range":"73","text":"74"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"73","text":"75"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"76","text":"74"},{"range":"76","text":"75"},{"range":"77","text":"74"},{"range":"77","text":"75"},[1304,1307],"unknown","never",[1999,2002],[1400,1403]]